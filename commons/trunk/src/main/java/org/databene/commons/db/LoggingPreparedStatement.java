/*
 * (c) Copyright 2007 by Volker Bergmann. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, is permitted under the terms of the
 * GNU General Public License.
 *
 * For redistributing this software or a derivative work under a license other
 * than the GPL-compatible Free Software License as defined by the Free
 * Software Foundation or approved by OSI, you must first obtain a commercial
 * license to this software product from Volker Bergmann.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * WITHOUT A WARRANTY OF ANY KIND. ALL EXPRESS OR IMPLIED CONDITIONS,
 * REPRESENTATIONS AND WARRANTIES, INCLUDING ANY IMPLIED WARRANTY OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT, ARE
 * HEREBY EXCLUDED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

package org.databene.commons.db;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.databene.commons.Converter;
import org.databene.commons.StringUtil;
import org.databene.commons.converter.ArrayConverter;
import org.databene.commons.converter.ToStringConverter;

/**
 * Provides database related utility methods.<br/>
 * <br/>
 * Created: 28.06.2007 12:30:02
 * @author Volker Bergmann
 */
public class LoggingPreparedStatement implements PreparedStatement {
	
    private static final Log sqlLogger = LogFactory.getLog("org.databene.SQL"); 
    private static final Log jdbcLogger = LogFactory.getLog("org.databene.JDBC");
    private static final Converter<Object[], String[]> toStringArrayConverter 
    	= new ArrayConverter<Object, String>(String.class, new ToStringConverter<Object>());

	private String sql;
	private PreparedStatement realStatement;
	Object[] params;
	
	public LoggingPreparedStatement(Connection connection, String sql) throws SQLException {
		this.sql = sql;
		this.realStatement = connection.prepareStatement(sql);
		int paramCount = StringUtil.countChars(sql, '?');
		params = new Object[paramCount];
	}

	public void addBatch() throws SQLException {
		logAll("addBatch", sql);
		realStatement.addBatch();
	}

	public void addBatch(String sql) throws SQLException {
		logAll("addBatch", sql);
		realStatement.addBatch(sql);
	}

	public void cancel() throws SQLException {
		realStatement.cancel();
	}

	public void clearBatch() throws SQLException {
		realStatement.clearBatch();
	}

	public void clearParameters() throws SQLException {
		realStatement.clearParameters();
	}

	public void clearWarnings() throws SQLException {
		realStatement.clearWarnings();
	}

	public void close() throws SQLException {
		realStatement.close();
	}

	// execute methods -------------------------------------------------------------------------------------------------

	public boolean execute() throws SQLException {
		logAll("execute", this.sql);
		clearParams();
		return realStatement.execute();
	}

	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		logAll("execute", sql);
		return realStatement.execute(sql, autoGeneratedKeys);
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		logAll("execute", sql);
		return realStatement.execute(sql, columnIndexes);
	}

	public boolean execute(String sql, String[] columnNames) throws SQLException {
		logAll("execute", sql);
		return realStatement.execute(sql, columnNames);
	}

	public boolean execute(String sql) throws SQLException {
		logAll("execute", sql);
		return realStatement.execute(sql);
	}

	public int[] executeBatch() throws SQLException {
		jdbcLogger.debug("executeBatch()");
		clearParams();
		return realStatement.executeBatch();
	}

	public ResultSet executeQuery() throws SQLException {
		logAll("executeQuery", sql);
		clearParams();
		return realStatement.executeQuery();
	}

	public ResultSet executeQuery(String sql) throws SQLException {
		logAll("executeQuery", sql);
		clearParams();
		return realStatement.executeQuery(sql);
	}
	
	public int executeUpdate() throws SQLException {
		logAll("executeUpdate", sql);
		clearParams();
		return realStatement.executeUpdate();
	}

	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		logAll("executeUpdate", sql);
		return realStatement.executeUpdate(sql, autoGeneratedKeys);
	}

	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		logAll("executeUpdate", sql);
		return realStatement.executeUpdate(sql, columnIndexes);
	}

	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		logAll("executeUpdate", sql);
		return realStatement.executeUpdate(sql, columnNames);
	}

	public int executeUpdate(String sql) throws SQLException {
		logAll("executeUpdate", sql);
		return realStatement.executeUpdate(sql);
	}

	public Connection getConnection() throws SQLException {
		return realStatement.getConnection();
	}

	public int getFetchDirection() throws SQLException {
		return realStatement.getFetchDirection();
	}

	public int getFetchSize() throws SQLException {
		return realStatement.getFetchSize();
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return realStatement.getGeneratedKeys();
	}

	public int getMaxFieldSize() throws SQLException {
		return realStatement.getMaxFieldSize();
	}

	public int getMaxRows() throws SQLException {
		return realStatement.getMaxRows();
	}

	public ResultSetMetaData getMetaData() throws SQLException {
		return realStatement.getMetaData();
	}

	public boolean getMoreResults() throws SQLException {
		return realStatement.getMoreResults();
	}

	public boolean getMoreResults(int arg0) throws SQLException {
		return realStatement.getMoreResults(arg0);
	}

	public ParameterMetaData getParameterMetaData() throws SQLException {
		return realStatement.getParameterMetaData();
	}

	public int getQueryTimeout() throws SQLException {
		return realStatement.getQueryTimeout();
	}

	public ResultSet getResultSet() throws SQLException {
		return realStatement.getResultSet();
	}

	public int getResultSetConcurrency() throws SQLException {
		return realStatement.getResultSetConcurrency();
	}

	public int getResultSetHoldability() throws SQLException {
		return realStatement.getResultSetHoldability();
	}

	public int getResultSetType() throws SQLException {
		return realStatement.getResultSetType();
	}

	public int getUpdateCount() throws SQLException {
		return realStatement.getUpdateCount();
	}

	public SQLWarning getWarnings() throws SQLException {
		return realStatement.getWarnings();
	}
	
	public void setQueryTimeout(int arg0) throws SQLException {
		realStatement.setQueryTimeout(arg0);
	}

	public void setCursorName(String arg0) throws SQLException {
		realStatement.setCursorName(arg0);
	}

	public void setEscapeProcessing(boolean arg0) throws SQLException {
		realStatement.setEscapeProcessing(arg0);
	}

	public void setFetchDirection(int arg0) throws SQLException {
		realStatement.setFetchDirection(arg0);
	}

	public void setFetchSize(int arg0) throws SQLException {
		realStatement.setFetchSize(arg0);
	}

	public void setMaxFieldSize(int arg0) throws SQLException {
		realStatement.setMaxFieldSize(arg0);
	}

	public void setMaxRows(int arg0) throws SQLException {
		realStatement.setMaxRows(arg0);
	}


	
	// setter methods for parameter values -----------------------------------------------------------------------------

	public void setArray(int paramIndex, Array x) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setArray(paramIndex, x);
	}

	public void setAsciiStream(int paramIndex, InputStream x, int length) throws SQLException {
		params[paramIndex - 1] = "<stream data>";
		realStatement.setAsciiStream(paramIndex, x, length);
	}

	public void setBigDecimal(int paramIndex, BigDecimal x) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setBigDecimal(paramIndex, x);
	}

	public void setBinaryStream(int paramIndex, InputStream x, int length) throws SQLException {
		params[paramIndex - 1] = "<binary stream data>";
		realStatement.setBinaryStream(paramIndex, x, length);
	}

	public void setBlob(int paramIndex, Blob x) throws SQLException {
		params[paramIndex - 1] = "<blob data>";
		realStatement.setBlob(paramIndex, x);
	}

	public void setBoolean(int paramIndex, boolean x) throws SQLException {
		realStatement.setBoolean(paramIndex, x);
	}

	public void setByte(int paramIndex, byte x) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setByte(paramIndex, x);
	}

	public void setBytes(int paramIndex, byte[] x) throws SQLException {
		params[paramIndex - 1] = "<bytes>";
		realStatement.setBytes(paramIndex, x);
	}

	public void setCharacterStream(int paramIndex, Reader x, int arg2) throws SQLException {
		params[paramIndex - 1] = "<character stream data>";
		realStatement.setCharacterStream(paramIndex, x, arg2);
	}

	public void setClob(int paramIndex, Clob x) throws SQLException {
		params[paramIndex - 1] = "<blob data>";
		realStatement.setClob(paramIndex, x);
	}

	public void setDate(int paramIndex, Date x, Calendar cal) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setDate(paramIndex, x, cal);
	}

	public void setDate(int paramIndex, Date x) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setDate(paramIndex, x);
	}

	public void setDouble(int paramIndex, double x) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setDouble(paramIndex, x);
	}

	public void setFloat(int paramIndex, float x) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setFloat(paramIndex, x);
	}

	public void setInt(int paramIndex, int x) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setInt(paramIndex, x);
	}

	public void setLong(int paramIndex, long x) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setLong(paramIndex, x);
	}

	public void setNull(int paramIndex, int sqlType, String typeName) throws SQLException {
		params[paramIndex - 1] = "null";
		realStatement.setNull(paramIndex, sqlType, typeName);
	}

	public void setNull(int paramIndex, int sqlType) throws SQLException {
		params[paramIndex - 1] = "null";
		realStatement.setNull(paramIndex, sqlType);
	}

	public void setObject(int paramIndex, Object x, int targetSqlType, int scale) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setObject(paramIndex, x, targetSqlType, scale);
	}

	public void setObject(int paramIndex, Object x, int targetSqlType) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setObject(paramIndex, x, targetSqlType);
	}

	public void setObject(int paramIndex, Object x) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setObject(paramIndex, x);
	}

	public void setRef(int paramIndex, Ref x) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setRef(paramIndex, x);
	}

	public void setShort(int paramIndex, short x) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setShort(paramIndex, x);
	}

	public void setString(int paramIndex, String x) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setString(paramIndex, x);
	}

	public void setTime(int paramIndex, Time x, Calendar cal) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setTime(paramIndex, x, cal);
	}

	public void setTime(int paramIndex, Time x) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setTime(paramIndex, x);
	}

	public void setTimestamp(int paramIndex, Timestamp x, Calendar cal) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setTimestamp(paramIndex, x, cal);
	}

	public void setTimestamp(int paramIndex, Timestamp x) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setTimestamp(paramIndex, x);
	}

	@Deprecated
	public void setUnicodeStream(int paramIndex, InputStream x, int length) throws SQLException {
		realStatement.setUnicodeStream(paramIndex, x, length);
	}

	public void setURL(int paramIndex, URL x) throws SQLException {
		params[paramIndex - 1] = x;
		realStatement.setURL(paramIndex, x);
	}
	
	// private helpers -------------------------------------------------------------------------------------------------
	
	private void clearParams() {
		this.params = new Object[this.params.length];
	}

	private void logAll(String method, String sql) {
		if (jdbcLogger.isDebugEnabled())
			jdbcLogger.debug(method + ": " + sql);
		sqlLogger.debug(toString());
	}

	// java.lang.Object overrides --------------------------------------------------------------------------------------
	
	@Override
	public String toString() {
		String[] paramStrings = toStringArrayConverter.convert(params);
		return StringUtil.replaceTokens(sql, "?", paramStrings);
	}
	
	@Override
	public boolean equals(Object other) {
		return realStatement.equals(other);
	}
	
	@Override
	public int hashCode() {
		return realStatement.hashCode();
	}
}
